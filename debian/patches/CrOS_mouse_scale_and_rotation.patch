--- a/src/main.c
+++ b/src/main.c
@@ -550,6 +550,7 @@
         initPerScreenCallbacks (screen_info);
 
         XDefineCursor (main_display_info->dpy, screen_info->xroot, myDisplayGetCursorRoot(main_display_info));
+	g_timeout_add_seconds(1, myScreenSetCrosDisplayProps, screen_info);
     }
 
     /* No screen to manage, give up */
--- a/src/screen.c
+++ b/src/screen.c
@@ -33,6 +33,7 @@
 #include <gtk/gtk.h>
 #include <pango/pango.h>
 #include <libxfce4util/libxfce4util.h>
+#include <math.h>
 
 #ifdef HAVE_RENDER
 #include <X11/extensions/Xrender.h>
@@ -757,6 +758,14 @@
     screen_info->cache_monitor.y = -1;
     screen_info->cache_monitor.width = 0;
     screen_info->cache_monitor.height = 0;
+    screen_info->cache_monitor_mm.x = -1;
+    screen_info->cache_monitor_mm.y = -1;
+    screen_info->cache_monitor_mm.width = 0;
+    screen_info->cache_monitor_mm.height = 0;
+    screen_info->cache_monitor_cros.x = -1;
+    screen_info->cache_monitor_cros.y = -1;
+    screen_info->cache_monitor_cros.width = 0;
+    screen_info->cache_monitor_cros.height = 0;
 }
 
 /*
@@ -768,7 +777,9 @@
 {
     gint dx, dy, center_x, center_y, num_monitors, i;
     guint32 distsquare, min_distsquare;
-    GdkRectangle monitor, nearest_monitor = { G_MAXINT, G_MAXINT, 0, 0 };
+    GdkRectangle monitor, monitor_mm, nearest_monitor, nearest_monitor_mm =
+	{ G_MAXINT, G_MAXINT, 0, 0 };
+    gint internal = 0;
 
     g_return_if_fail (screen_info != NULL);
     g_return_if_fail (rect != NULL);
@@ -792,11 +803,17 @@
 
         monitor_index = myScreenGetMonitorIndex (screen_info, i);
         gdk_screen_get_monitor_geometry (screen_info->gscr, monitor_index, &monitor);
+	monitor_mm = monitor;
+	monitor_mm.width = gdk_screen_get_monitor_width_mm (screen_info->gscr, monitor_index);
+	monitor_mm.height = gdk_screen_get_monitor_height_mm (screen_info->gscr, monitor_index);
 
         if ((x >= monitor.x) && (x < (monitor.x + monitor.width)) &&
             (y >= monitor.y) && (y < (monitor.y + monitor.height)))
         {
             screen_info->cache_monitor = monitor;
+	    screen_info->cache_monitor_mm = monitor_mm;
+	    screen_info->cache_monitor_internal =
+		myScreenGetMonitorInternal(screen_info, monitor_index);
             *rect = screen_info->cache_monitor;
             return;
         }
@@ -813,13 +830,41 @@
         {
             min_distsquare = distsquare;
             nearest_monitor = monitor;
+	    nearest_monitor_mm = monitor_mm;
+	    internal = myScreenGetMonitorInternal(screen_info, monitor_index);
         }
     }
 
     screen_info->cache_monitor = nearest_monitor;
+    screen_info->cache_monitor_mm = nearest_monitor_mm;
+    screen_info->cache_monitor_internal = internal;
     *rect = screen_info->cache_monitor;
 }
 
+void
+myScreenFindMonitorMMAtPoint (ScreenInfo *screen_info, gint x, gint y, GdkRectangle *rect)
+{
+    GdkRectangle monitor;
+
+    myScreenFindMonitorAtPoint (screen_info, x, y, &monitor);
+    *rect = screen_info->cache_monitor_mm;
+}
+
+void
+myScreenScaleAtPoint (ScreenInfo *screen_info, gint x, gint y, float *scale_factor) {
+    GdkRectangle rect;
+    float dpi;
+
+    myScreenFindMonitorMMAtPoint (screen_info, x, y, &rect);
+    dpi = screen_info->cache_monitor.width / (screen_info->cache_monitor_mm.width / 25.4);
+
+    if (dpi <= 0) {
+	dpi = 96.0f;
+    }
+
+    *scale_factor = dpi/96.0f;
+}
+
 gboolean
 myScreenUpdateFontHeight (ScreenInfo *screen_info)
 {
@@ -848,3 +893,83 @@
 
     return FALSE;
 }
+
+void myScreenChangeCrosProp(ScreenInfo *screenInfo, char *prop, int value) {
+    glong    *data;
+    Atom name, type;
+
+    data = g_malloc(sizeof(glong));
+    data[0] = value;
+    name = XInternAtom(screenInfo->display_info->dpy, prop, FALSE);
+    type = XInternAtom(screenInfo->display_info->dpy, "CARDINAL", FALSE);
+    XChangeProperty(screenInfo->display_info->dpy,
+		    screenInfo->xroot,
+		    name,
+		    type,
+		    32,
+		    PropModeReplace,
+		    (unsigned char *)data,
+		    1);
+
+    g_free(data);
+}
+
+gboolean myScreenSetCrosDisplayProps (ScreenInfo *screen_info) {
+    float scale_factor;
+    const float scale_factors[] = {1.0f, 1.0f, 1.25f, 1.33f, 1.4f, 1.5f, 1.8f,
+					2.0f, 2.5f, 3.0f};
+    int i, num_factors;
+    float smallest_diff, diff, new_scale_factor;
+    Rotation rotation;
+    XRRScreenConfiguration *conf;
+    Window dr, window;
+    unsigned int modifiers;
+    int x, y, wx, wy;
+
+    XQueryPointer (myScreenGetXDisplay (screen_info), screen_info->xroot,
+                   &dr, &window, &x, &y, &wx, &wy, &modifiers);
+
+    /* Cache system */
+    if ((x >= screen_info->cache_monitor_cros.x) && (x < screen_info->cache_monitor_cros.x + screen_info->cache_monitor_cros.width) &&
+        (y >= screen_info->cache_monitor_cros.y) && (y < screen_info->cache_monitor_cros.y + screen_info->cache_monitor_cros.height))
+    {
+        return TRUE;
+    }
+
+    myScreenScaleAtPoint (screen_info, x, y, &scale_factor);
+    screen_info->cache_monitor_cros = screen_info->cache_monitor;
+    smallest_diff = diff = 0;
+    new_scale_factor = scale_factor;
+    num_factors = sizeof(scale_factors)/sizeof(scale_factors[0]);
+    for (i = 0; i < num_factors; i++) {
+	diff = fabs(scale_factor - scale_factors[i]);
+	if (!i || diff < smallest_diff) {
+	    smallest_diff = diff;
+	    new_scale_factor = scale_factors[i];
+	}
+    }
+
+    scale_factor = new_scale_factor;
+
+    conf = XRRGetScreenInfo(screen_info->display_info->dpy, screen_info->xroot);
+    XRRConfigCurrentConfiguration(conf, &rotation);
+
+    myScreenChangeCrosProp(screen_info, "_CHROME_DISPLAY_ROTATION", rotation);
+    myScreenChangeCrosProp(screen_info, "_CHROME_DISPLAY_SCALE_FACTOR", (int)(scale_factor * 100));
+    myScreenChangeCrosProp(screen_info, "_CHROME_DISPLAY_INTERNAL", screen_info->cache_monitor_internal);
+
+    return TRUE;
+}
+
+gint myScreenGetMonitorInternal(ScreenInfo *screen_info, gint monitor_index) {
+    gchar *plug;
+    gint internal = 0;
+
+    plug = gdk_screen_get_monitor_plug_name (screen_info->gscr, monitor_index);
+    if (!strcmp(plug, "eDP1")) {
+	internal = 1;
+    }
+    g_free(plug);
+
+    return internal;
+}
--- a/src/screen.h
+++ b/src/screen.h
@@ -120,6 +120,9 @@
 
     /* Monitor search caching */
     GdkRectangle cache_monitor;
+    GdkRectangle cache_monitor_mm;
+    GdkRectangle cache_monitor_cros;
+    gint cache_monitor_internal;
     gint num_monitors;
     GArray *monitors_index;
 
@@ -246,6 +249,19 @@
                                                                  gint,
                                                                  gint,
                                                                  GdkRectangle *);
+void                     myScreenFindMonitorMMAtPoint           (ScreenInfo *screen_info,
+								 gint x, gint y,
+								 GdkRectangle *rect);
+void                     myScreenScaleAtPoint                   (ScreenInfo *screen_info,
+								 gint x,
+								 gint y,
+								 float *scale_factor);
+void                     myScreenChangeCrosProp                 (ScreenInfo *screenInfo,
+								 char *prop,
+								 int value);
+gboolean                 myScreenSetCrosDisplayProps            (ScreenInfo *screen_info);
+gint                     myScreenGetMonitorInternal        (ScreenInfo *screen_info,
+								 gint monitor_index);
 gboolean                 myScreenUpdateFontHeight               (ScreenInfo *);
 
 #endif /* INC_SCREEN_H */
